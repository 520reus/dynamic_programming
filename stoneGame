#include<iostream>
#include<vector>
using namespace std;

//*动态规划解决【石头游戏】博弈问题
/* 
问题描述：
你和你的朋友⾯前有⼀排⽯头堆，⽤⼀个数组 piles 表⽰，piles[i]表⽰第i堆⽯⼦有多少个。你们轮流拿⽯头，
⼀次拿⼀堆，但是只能拿⾛最左边或者 最右边的⽯头堆。所有⽯头被拿完后，谁拥有的⽯头多，谁获胜。
返回先⼿和后⼿的最后得分（⽯头总数）之差。
问题分析：
博弈问题的难点在于，两个⼈要轮流进⾏选择，⽽且都贼精明，应该如何编程表⽰这个过程呢？
首先明确dp数组的含义，然后和股票买卖系列问题类似，只要找到「状态」和「选择」，⼀切就⽔到渠成了。
举例：
piles = [3,9,1,2]
dp数组可用：dp[i,j]=(first,second)的方式进行存储，因为博弈问题涉及到先手与后手的问题，所以每一个状态
都用一个元组保存数据，dp[i,j].first表示对于石堆piles[i...j]，先手可以获得的最多石头数
dp[i,j].second表示后手可以获得的最多石头数
base case：
最容易想到的就是基线条件，当只剩一堆石头时，先手拿到了piles[i]，后手没有石头可拿了
即当i==j时，dp[i,j].fir = piles[i],dp[i,j].sec = 0
状态转移方程:
首先要找到所有状态，和每个状态下能做的所有选择，然后择优
显然状态有三个，i、j和先后手
最终的状态是dp[0][n-1]，在右上角，dp数组的左下角无意义(i==j时就只有一堆石头了),对角线元素对应着基线条件
“当前状态”下的“选择”：
dp[i][j].first可以由piles[i]+dp[i+1][j].sec或piles[j]+dp[i][j-1].sec转移得到，选择大的那个！
解释：我作为先手，面对piles[i][j]时有两种选择：
1.选择最左边的那一堆，然后面对piles[i+1][j]，我变成了后手
2.选择最右边的那一堆，然后面对piles[i][j-1]，我变成了后手
if 先手选择了左边：
    dp[i][j].sec = dp[i+1][j].first
if 先手选择了右边：
    dp[i][j].sec = dp[i][j-1].first
解释：我作为后手，要等先手先选择，有两种情况：
如果先手选择了最左边那堆，给我剩下了piles[i+1][j]，此时轮到我，我变成了先手
如果先手选择了最右边那堆，给我剩下了piles[i][j-1]，此时轮到我，我变成了先手
状态转移对应着dp数组中左面与下面的元素，而已知基线条件全为对角线元素，所以穷举时需要斜着迭代dp数组！
 */

int stoneGame(vector<int>& piles)
{
    int n = piles.size();
    //初始化dp数组为nxn维，每一个元素存储着一个元组，用pair表示整数对
    vector<vector<pair<int,int>>>dp(n,vector<pair<int,int>>(n));
    //base case
    for(int i=0;i<n;++i)
        dp[i][i] = make_pair(piles[i],0);
    //斜着遍历dp数组
    for(int k=2;k<=n;++k)
        for(int i=0;i<=n-k;++i)
        {
            int j = k+i-1;

            int left = piles[i] + dp[i+1][j].second;
            int right = piles[j] + dp[i][j-1].second;
            //如果左边选择更优
            if(left > right)
            {
                dp[i][j].first = left;
                dp[i][j].second = dp[i+1][j].first;
            }
            //如果右边选择更优
            else
            {
                dp[i][j].first = right;
                dp[i][j].second = dp[i][j-1].first;
            }
        }
    //返回piles[0...n-1]先手能得到的最多石头数与后手能得到的最多石头数的差
    return dp[0][n-1].first-dp[0][n-1].second;
}


int main()
{
    vector<int> piles = {9,3,1,2};
    cout<<stoneGame(piles)<<endl;
    system("pause");
    return 0;
}
