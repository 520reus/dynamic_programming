#include<iostream>
#include<vector>
using namespace std;

//* 一.递归解决斐波那契数列

//? 1.暴力递归(o(2^n))
int fib(int n)
{
    if(n <= 0) return 0;
    //base case
    if(n==1 || n==2)
        return 1;
    else
        return fib(n-1) + fib(n-2);
    
}
//? 2.带备忘录的递归算法(o(n))
int helper(int n,vector<int>& memo);
int fib2(int n)
{
    if(n <= 0) return 0;
    //备忘录,共n+1个值，第一个位置不用，全部初始化为0
    vector<int> memo(n+1,0);
    //自顶向下，递归计算fib(n)=fib(n-1)+fib(n-2),带剪枝功能
    return helper(n,memo);
    
    
}

int helper(int n,vector<int>& memo)
{
    if(n==1 || n==2)
        return 1;
    //剪枝
    else if(memo[n]!=0)
        return memo[n];
    else
        return helper(n-1,memo) + helper(n-2,memo);
}

//? 3.dp数组的迭代解法(o(n))
int fib3(int n)
{
    if(n<=0) return 0;
    //声明dp数组
    vector<int> dp_table(n+1,0);
    dp_table[1]=dp_table[2]=1;
    //自底往上，迭代填好dp_table
    for(int i=3;i<=n;++i)
    {
        dp_table[i] = dp_table[i-1] + dp_table[i-2];
    }
    return dp_table[n];
}
//? 4.dp数组的迭代解法优化(时间：o(n)，空间：(o(1)))
int fib4(int n)
{
    if(n<=0) return 0;
    int pre = 1; 
    int cur = 1;
    int sum = 0;
    
    for(int i=3;i<=n;++i)
    {
        sum = cur + pre;
        pre = cur;
        cur = sum;
    }
    return cur;

}

int main()
{
    cout<<fib4(20)<<endl;

    system("pause");
    return 0;
}
