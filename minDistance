#include<iostream>
#include<vector>

using namespace std;

//*动态规划解决最短编辑距离问题
/*
题目：给定两个字符串s1和s2，计算出将s1转换成s2所使用的最少操作数
你可以对一个字符串进行如下三种操作：
    1.插入一个字符
    2.删除一个字符
    3.替换一个字符

实例：输入：s1 = "horse",s2="ros"
     输出：3
     解释：
     horse -> rorse(将'h'替换为'r')
     rorse -> rose(删除'r')
     rose  -> ros(删除'e')

应用：编辑距离可以衡量两个DNA序列的相似度，编辑距离越小，说明两段DNA越相似
需要明确的是，不管把s1变成s2还是反过来，结果都是一样的
 */
//* 解决两个字符串的动态规划问题，一般都是用两个指针i，j分别指向两个字符串的最后，然后一步步往前走，缩小问题的规模
int dp(int i,int j,string s1,string s2);
int minof3(int a,int b,int c);
int minDistance(string s1,string s2)
{
    int m = s1.size();
    int n = s2.size();
    return dp(m-1,n-1,s1,s2);
}
//dp[i,j]的定义为：返回s1[0,i]和s2[0,j]的最小编辑距离
int dp(int i,int j,string s1,string s2)
{
    //base case: 
    //1.s1已经遍历完成，为了让s1变成s2，需要把s2剩下的1+j个字符全部插入到s1的前面，所以需要1+j步额外的操作
    if(i == -1) return j+1;
    //2.s2已经遍历完成，为了让s1变成s2，需要把s1多余的1+i个字符全部删除，所以需要1+i步额外的操作
    if(j == -1) return i+1;
    //若当前s1与s2的字符相等，则跳过继续匹配剩下的字符即可，无需做额外的操作
    if(s1[i] == s2[j]) 
        return dp(i-1,j-1,s1,s2);
    else 
    //若当前字符不相等，则选择3个操作中使编辑距离最小的那个操作
        return minof3(1+dp(i-1,j,s1,s2),  //删除
                   1+dp(i,j-1,s1,s2),  //插入
                   1+dp(i-1,j-1,s1,s2)); //替换
}
// 3个数中求最小值
int minof3(int a,int b,int c)
{
    return min(a,min(b,c));
}

//* 动态规划解法
int minDistance_dp(string s1,string s2)
{
    int m = s1.size();
    int n = s2.size();
    //*初始化二维数组的方法
    //声明dp数组为dp[m+1][n+1]，比字符串长度多1是为了在0的位置存储基线条件
    vector<vector<int>> dp(m+1,vector<int>(n+1,0));
    //base case 1
    for(int i=1;i<=m;++i)
    {
        dp[i][0] = i;
    }
    //base case 2
    for(int i=1;i<=n;++i)
    {
        dp[0][i] = i;
    }
    for(int i=1;i<=m;++i)
        for(int j=1;j<=n;++j)
        {
            if(s1[i-1] == s2[j-1])
                dp[i][j] = dp[i-1][j-1];
            else
            {
                dp[i][j] = minof3(
                    dp[i][j-1]+1,
                    dp[i-1][j]+1,
                    dp[i-1][j-1]+1
                );
            }
        }
    //dp中储存了整个s1，s2的最小编辑距离
    return dp[m][n];

}

int main()
{
    /* vector<vector<int>> dp(8,vector<int>(7,0));
    cout<<dp[7][6]<<endl; */
    cout<<minDistance("amd","intel")<<endl;
    cout<<minDistance_dp("amd","intel")<<endl;
    system("pause");
    return 0;
}
